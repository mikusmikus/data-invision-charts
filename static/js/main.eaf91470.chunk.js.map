{"version":3,"sources":["components/stability-chart.tsx","data-options/stability-options.ts","helper-functions/bar-colors.ts","App.tsx","data-options/importance-options.ts","reportWebVitals.ts","index.tsx"],"names":["StabilityCharts","stabilityData","title","height","type","width","useState","chartData","setChartData","useEffect","xLeftEdge","yBaseline","yProduction","series","name","data","options","text","chart","dataLabels","enabled","stroke","curve","colors","legend","show","markers","fillColors","xaxis","categories","labels","formatter","value","Number","toFixed","rotateAlways","rotate","minHeight","offsetY","style","fontSize","yaxis","tickAmount","maxWidth","minWidth","stabilityOptions","className","stabilityMaxValue","nanStabilityValue","nanStabilityAnalysis","stabilityGroup","stabilityValue","stabilityAnalysis","Math","max","barColor","feature_importance","featureImportance","metrics","names","importance","stability","feature_stability","productionModelMetrics","parameterStability","App","importanceData","setImportanceData","stabilityChart","setStabilityChart","nanStabilityChart","setNanStabilityChart","seriesData","namesData","onFeatureClick","events","click","event","chartContext","config","dataPointIndex","plotOptions","bar","horizontal","distributed","showForNullSeries","align","trim","axisBorder","grid","lines","responsive","breakpoint","importanceOptions","map","handleColors","featureIndex","clickedFeature","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaf91470.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { stabilityOptions } from '../data-options/stability-options';\nimport { ChartType, Stability, StabilityOptions } from '../types/StabilityOptions';\n\ntype Props = {\n  stabilityData: Stability;\n  title?: string;\n  height?: number;\n  width?: number | string;\n  type?: ChartType;\n};\n\nconst StabilityCharts: FC<Props> = ({\n  stabilityData,\n  title = '',\n  height = 600,\n  type = 'bar',\n  width = '100%',\n}) => {\n  const [chartData, setChartData] = useState<StabilityOptions>();\n\n  useEffect(() => {\n    setChartData(\n      stabilityOptions(\n        stabilityData.xLeftEdge,\n        stabilityData.yBaseline,\n        stabilityData.yProduction,\n        title\n      )\n    );\n  }, [stabilityData]);\n\n  return (\n    <div className=\"container container-fluid\">\n      <div className=\"row \">\n        <div className=\"col-xs-12\">\n          {chartData && (\n            <Chart\n              options={chartData.options}\n              series={chartData.series}\n              height={height}\n              width={width}\n              type={type}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StabilityCharts;\n","import { StabilityOptions } from '../types/StabilityOptions';\n\nexport const stabilityOptions = (\n  xLeftEdge: number[],\n  yBaseline: number[],\n  yProduction: number[],\n  title?: string,\n  type?: string\n): StabilityOptions => {\n  return {\n    series: [\n      {\n        name: 'production',\n        data: yProduction,\n      },\n      {\n        name: 'baseline',\n        data: yBaseline,\n      },\n    ],\n    options: {\n      title: {\n        text: title || '',\n      },\n      chart: {\n        height: 600,\n        type: type || 'area',\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n        colors: ['#0EDE14', '#FFA110'],\n        width: 4,\n      },\n      legend: {\n        show: true,\n        markers: {\n          fillColors: ['#0EDE14', '#FFA110'],\n        },\n      },\n      colors: ['#0EDE14', '#FFA110'],\n      xaxis: {\n        categories: xLeftEdge,\n        labels: {\n          formatter(value: string) {\n            return Number(value).toFixed(4);\n          },\n          show: true,\n          rotateAlways: false,\n          rotate: -45,\n          minHeight: 50,\n          offsetY: 5,\n          style: {\n            fontSize: '9',\n          },\n        },\n      },\n      yaxis: {\n        tickAmount: 5,\n        labels: {\n          formatter(value: string) {\n            return Number(value).toFixed(4);\n          },\n          maxWidth: 200,\n          minWidth: 0,\n          style: {\n            fontSize: '12',\n          },\n        },\n      },\n    },\n  };\n};\n","import { ParameterStability } from '../types/StabilityOptions';\n\nexport const handleColors = (names: string[], stability: ParameterStability) => {\n  const stabilityMaxValues: number[] = names.map((name: string) => {\n    return stabilityMaxValue(stability, name);\n  });\n  const colors: string[] = stabilityMaxValues.map((value) => {\n    return barColor(value);\n  });\n  return colors;\n};\n\nconst stabilityMaxValue = (stabilityData: ParameterStability, name: string): number => {\n  const nanStabilityValue = stabilityData[name].nanStabilityAnalysis.stabilityGroup[0];\n  const stabilityValue = stabilityData[name].stabilityAnalysis.stabilityGroup[0];\n  return Math.max(nanStabilityValue, stabilityValue);\n};\n\nconst barColor = (value: number): string => {\n  if (value === 1) {\n    return '#0EDE14';\n  }\n  if (value === 2) {\n    return '#FFA110';\n  }\n  return '#FC0303';\n};\n","import React, { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { importanceOptions } from './data-options/importance-options';\nimport feature_importance from './data/feature_importance.json';\nimport feature_stability from './data/feature_stability.json';\nimport { ImportanceOptions, Metrics } from './types/ImportanceOptions';\nimport StabilityChart from './components/stability-chart';\nimport { ParameterStability, Stability } from './types/StabilityOptions';\nimport { handleColors } from './helper-functions/bar-colors';\n\nconst { names, importance }: Metrics = feature_importance.data.featureImportance.metrics;\nconst stability: ParameterStability =\n  feature_stability.data.productionModelMetrics.parameterStability;\n\nconst App = () => {\n  const [importanceData, setImportanceData] = useState<ImportanceOptions>();\n  const [stabilityChart, setStabilityChart] = useState<Stability>();\n  const [nanStabilityChart, setNanStabilityChart] = useState<Stability>();\n\n  useEffect(() => {\n    setImportanceData(\n      importanceOptions(\n        importance,\n        names,\n        'Feature importance',\n        handleColors(names, stability),\n        onFeatureClick\n      )\n    );\n  }, []);\n\n  const onFeatureClick = (featureIndex: number) => {\n    const clickedFeature = names[featureIndex];\n    if (clickedFeature) {\n      setStabilityChart(stability[clickedFeature].stabilityAnalysis);\n      setNanStabilityChart(stability[clickedFeature].nanStabilityAnalysis);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"container container-fluid\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            {importanceData && (\n              <Chart\n                options={importanceData.options}\n                series={importanceData.series}\n                type=\"bar\"\n                height=\"800\"\n              />\n            )}\n          </div>\n        </div>\n        {stabilityChart && <StabilityChart stabilityData={stabilityChart} height={600} type='line' title='Stability' />}\n        {nanStabilityChart && <StabilityChart stabilityData={nanStabilityChart} height={400} width='60%' title='Non Stability' />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { Config, ImportanceOptions } from '../types/ImportanceOptions';\n\nexport const importanceOptions = (\n  seriesData: number[],\n  namesData: string[],\n  title: string,\n  colors: string[],\n  onFeatureClick: (index: number) => void\n): ImportanceOptions => {\n  return {\n    series: [\n      {\n        name: 'importance',\n        data: seriesData,\n      },\n    ],\n    options: {\n      title: {\n        text: title,\n      },\n      colors,\n      chart: {\n        type: 'bar',\n        events: {\n          click: (event: MouseEvent, chartContext: object, config: Config) => {\n            onFeatureClick(config.dataPointIndex);\n          },\n        },\n      },\n      plotOptions: {\n        bar: {\n          horizontal: true,\n          distributed: true,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      legend: {\n        show: false,\n      },\n      yaxis: {\n        labels: {\n          showForNullSeries: false,\n          align: 'right',\n          trim: true,\n          maxWidth: 900,\n          minWidth: 0,\n          style: {\n            fontSize: '12',\n          },\n        },\n      },\n      xaxis: {\n        tickAmount: 2,\n        categories: namesData,\n        labels: {\n          show: true,\n        },\n        axisBorder: {\n          show: false,\n        },\n      },\n      grid: {\n        xaxis: {\n          lines: {\n            show: true,\n          },\n        },\n        yaxis: {\n          lines: {\n            show: false,\n          },\n        },\n      },\n      responsive: [\n        {\n          breakpoint: 1260,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 800,\n                style: {\n                  fontSize: '11',\n                },\n              },\n            },\n            xaxis: {\n              labels: {\n                maxWidth: 200,\n              },\n            },\n          },\n        },\n        {\n          breakpoint: 1040,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 600,\n                style: {\n                  fontSize: '10',\n                },\n              },\n            },\n          },\n        },\n        {\n          breakpoint: 768,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 400,\n                style: {\n                  fontSize: '10',\n                },\n              },\n            },\n          },\n        },\n        {\n          breakpoint: 700,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 400,\n                style: {\n                  fontSize: '9',\n                },\n              },\n            },\n          },\n        },\n        {\n          breakpoint: 600,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 300,\n                style: {\n                  fontSize: '9',\n                },\n              },\n            },\n          },\n        },\n        {\n          breakpoint: 500,\n          options: {\n            yaxis: {\n              labels: {\n                maxWidth: 200,\n                style: {\n                  fontSize: '9',\n                },\n              },\n            },\n          },\n        },\n      ],\n    },\n  };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}